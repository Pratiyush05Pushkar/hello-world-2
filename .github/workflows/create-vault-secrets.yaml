name: Create vault policy, role and secrets
run-name: Create vault policy, role and secrets
on: 
  push:
    branches:
      - main
    paths:
        - resources/clusters/messier-aps1/prod/vault-secrets/**.yaml
        - resources/clusters/messier-apse1/prod/vault-secrets/**.yaml
        - resources/clusters/messier-apse1/prod-insecure/vault-secrets/**.yaml
        - resources/clusters/pandora-apse1/alpha/vault-secrets/**.yaml
        - resources/clusters/pandora-apse1/beta/vault-secrets/**.yaml
jobs:  
  build:
    runs-on: self-hosted
    name: Create vault policy, role and secrets
    steps:
      - uses: dcarbone/install-yq-action@v1.1.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Read files changed in recent git push
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            resources/clusters/messier-aps1/prod/vault-secrets/**.yaml
            resources/clusters/messier-apse1/prod/vault-secrets/**.yaml
            resources/clusters/messier-apse1/prod-insecure/vault-secrets/**.yaml
            resources/clusters/pandora-apse1/alpha/vault-secrets/**.yaml
            resources/clusters/pandora-apse1/beta/vault-secrets/**.yaml
      - name: Create vault policy and role
        run: |
          for val in ${{ steps.changed-files.outputs.all_changed_files }} ;
          do 
              echo "$val was changed"
              secret_path="secret/data/$(yq ".name" $val)/$(yq ".namespace" $val)"
              final_policy+="\n path \\\"${secret_path}\\\" { \n \t capabilities = [\\\"read\\\"] \n } \n"
              final_policy=\"$final_policy\"
              echo $final_policy
              echo "{ \"policy\" : ${final_policy} }" > payload.json
              cat payload.json
              policy_name="$(yq ".name" $val)_policy"
              role_name="$(yq ".name" $val)_role"
              service_account_name=$(yq ".serviceAccountName" $val)
              service_namespace=$(yq ".namespace" $val)
              curl --header "X-Vault-Token:${{ secrets.VAULT_ROOT_TOKEN }}" --request POST --data @payload.json http://127.0.0.1:8200/v1/sys/policy/apps/$policy_name          
              echo "{ \"name\": \"${role_name}\", \"bound_service_account_names\": \"${service_account_name}\", \"bound_service_account_namespaces\": \"${service_namespace}\", \"token_policies\": \"${policy_name}\" }" > payload.json
              cat payload.json
              curl --header "X-Vault-Token:${{ secrets.VAULT_ROOT_TOKEN }}" --request POST --data @payload.json http://127.0.0.1:8200/v1/auth/kubernetes/role/$role_name    
              rm -f payload.json
          done

      - name: Put secret in vault
        run: |
          for val in ${{ steps.changed-files.outputs.all_changed_files }} ;
          do 
              path=$(yq ".path" $val)
              secretKeys=($(yq ".data.[].secretKey" $val ))
              secretValues=($(yq ".data.[].secretValue" $val ))
              echo "$(jq -n '{data: $ARGS.named}' )">>payload.json
              for i in ${!secretValues[@]}; do
                echo "$(jq --arg key ${secretKeys[$i]} --arg pass ${secretValues[$i]} '.data[$key] = $pass' < payload.json)" > payload.json
              done
              cat payload.json
              curl --header "X-Vault-Token:${{ secrets.VAULT_ROOT_TOKEN }}" --request POST --data @payload.json http://127.0.0.1:8200/v1/secret/data/apps/$path    
              rm -f payload.json
          done
        