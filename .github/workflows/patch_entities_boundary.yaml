name: Renew credential store token

on:
  workflow_call:
    inputs:
      BOUNDARY_URL:
        required: true
        type: string
      VAULT_URL:
        required: true
        type: string
      REALM:
        required: true
        type: string
    secrets:
      token:
        required: true
      VAULT_TOKEN:
        required: true


jobs:
  build:
    runs-on: self-hosted
    name: Patch Entities in Boundary
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - name: Restore files to cache
        uses: actions/cache@v3
        with:
          key: ${{ github.sha }}_${{ inputs.REALM }}_patch_entities
          path: ./${{ inputs.REALM }}_patch_entities.yaml
      - name: Echo the data file
        run: |
            cat ${{ inputs.REALM }}_patch_entities.yaml

            host_names=($( yq ".items[].host_name" ${{ inputs.REALM }}_patch_entities.yaml))
            project_ids=($( yq ".items[].project_id" ${{ inputs.REALM }}_patch_entities.yaml))
            cred_store_ids=($( yq ".items[].cred_store_id" ${{ inputs.REALM }}_patch_entities.yaml))

            for i in ${!host_names[@]};
            do
                  #generate vault token for boundary
                  db_policy="$( echo ${host_names[$i]} )_db_policy"

                  echo "{ \"policies\": [\"${db_policy}\"],\"no_default_policy\": true,\"no_parent\": true,\"period\": \"5h\",\"renewable\": true }" > vault_db_token_payload.json
                  boundary_token=$(curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @vault_db_token_payload.json ${{ inputs.VAULT_URL }}/v1/auth/token/create | jq '.auth.client_token' )
                  echo Token to put in boundary $boundary_token

                  #Patch credential store in boundary
                  credential_store_name="$( echo ${host_names[$i]} )_cred_store"
                  cred_store_description="$( echo ${host_names[$i]} ) CRED STORE"

                  echo "{\"type\":\"vault\",\"name\":\"${credential_store_name}\",\"description\":\"${cred_store_description}\",\"version\":1,\"attributes\":{\"address\":\"http://vault.default:8200/\",\"namespace\":null,\"ca_cert\":null,\"tls_server_name\":null,\"tls_skip_verify\":false,\"token\":${boundary_token},\"client_certificate\":null,\"client_certificate_key\":null},\"scope_id\":\"${project_ids[$i]}\"}" > credential_store_payload.json
                  curl --header "Authorization: Bearer ${{ secrets.token }}" --request PATCH --data @credential_store_payload.json ${{ inputs.BOUNDARY_URL }}/v1/credential-stores/${cred_store_ids[$i]} > output.json
                  cat output.json
                  echo $( jq '.id' output.json )
                  #credential_store_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request PATCH --data @credential_store_payload.json ${{ inputs.BOUNDARY_URL }}/v1/credential-stores/${cred_store_ids[$i]} | jq '.id' )
                  echo Credential_store_id created is $credential_store_id

            done
      - name: Delete cache file
        run: |
          curl -L \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.DELETE_CACHE_GIT_TOKEN }}" \
          "https://api.github.com/repos/Pratiyush05Pushkar/hello-world-2/actions/caches?key=${{ github.sha }}_${{ inputs.REALM }}_patch_entities"
          #curl --location --request DELETE --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{ secrets.DELETE_CACHE_GIT_TOKEN }}" "https://api.github.com/repos/Pratiyush05Pushkar/hello-world-2/actions/caches?key=${{ github.sha }}_${{ inputs.REALM }}_patch_entities"



