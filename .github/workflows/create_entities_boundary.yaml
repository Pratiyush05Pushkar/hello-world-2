name: Create entities in Boundary

on:
  workflow_call:
    inputs:
      BOUNDARY_URL:
        required: true
        type: string
      VAULT_URL:
        required: true
        type: string
      REALM:
        required: true
        type: string
    secrets:
      GIT_TOKEN:
        required: true
      token:
        required: true
      VAULT_TOKEN:
        required: true

jobs:
  build:
    runs-on: self-hosted
    name: Create entities in Boundary
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - name: Restore files to cache
        uses: actions/cache@v3
        with:
          key: ${{ github.sha }}_${{ inputs.REALM }}_create_entities
          path: ./${{ inputs.REALM }}_create_entities.yaml
      - name: Echo the data file
        run: |
            no_of_items=$( yq ".items | length " ${{ inputs.REALM }}_create_entities.yaml)

            cat ${{ inputs.REALM }}_create_entities.yaml
            for ((i=0 ; i<no_of_items ; i++))
            do

                  project_id=$( yq ".items[$i].project_id" ${{ inputs.REALM }}_create_entities.yaml)
                  host_catalog_id=$( yq ".items[$i].host_catalog_id" ${{ inputs.REALM }}_create_entities.yaml)

                  #create host
                  host_name=$( yq ".items[$i].host.name" ${{ inputs.REALM }}_create_entities.yaml)
                  host_description=$( yq ".items[$i].host.description" ${{ inputs.REALM }}_create_entities.yaml)
                  host_ip=$( yq ".items[$i].host.address" ${{ inputs.REALM }}_create_entities.yaml)
                  echo "{\"attributes\":{\"address\":\"${host_ip}\"},\"type\":\"static\",\"host_catalog_id\":\"${host_catalog_id}\",\"name\":\"${host_name}\",\"description\":\"${host_description}\"}" > host.json
                  host_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @host.json ${{ inputs.BOUNDARY_URL }}/v1/hosts | jq '.id' )
                  echo Host $host_id

                  #create host-set
                  host_set_name="$( echo $host_name )_set"
                  host_set_description=$( yq ".items[$i].host.description" ${{ inputs.REALM }}_create_entities.yaml)
                  echo "{\"host_catalog_id\":\"${host_catalog_id}\",\"name\":\"${host_set_name}\",\"description\":\"${host_set_description}\"}" > new_host_set.json
                  host_set_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @new_host_set.json ${{ inputs.BOUNDARY_URL }}/v1/host-sets | jq '.id' )
                  echo Host-set $host_set_id

                  #add host to host-set
                  echo "{\"version\":1,\"host_ids\":[${host_id}]}" > add_host_to_host_set.json
                  host_set_id_trim="${host_set_id%\"}"
                  host_set_id_trim="${host_set_id_trim#\"}"
                  curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @add_host_to_host_set.json ${{ inputs.BOUNDARY_URL }}/v1/host-sets/$host_set_id_trim:add-hosts

                  #create read target
                  read_target_name="$( echo $host_name )_read_target"
                  read_target_description="$( yq ".items[$i].host_catalog_name" ${{ inputs.REALM }}_create_entities.yaml) DB"
                  read_target_port=$(yq ".items[$i].host.default_port" ${{ inputs.REALM }}_create_entities.yaml)
                  echo "{\"attributes\":{\"default_port\":${read_target_port}},\"type\":\"tcp\",\"name\":\"${read_target_name}\",\"description\":\"${read_target_description}\",\"session_max_seconds\":28800,\"session_connection_limit\":-1,\"worker_filter\":null,\"scope_id\":\"${project_id}\"}" > target.json
                  read_target_id=$( curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @target.json ${{ inputs.BOUNDARY_URL }}/v1/targets | jq '.id' )
                  echo Read target $read_target_id

                  #create write target
                  write_target_name="$( echo $host_name )_write_target"
                  write_target_description="$( yq ".items[$i].host_catalog_name" ${{ inputs.REALM }}_create_entities.yaml) DB"
                  write_target_port=$(yq ".items[$i].host.default_port" ${{ inputs.REALM }}_create_entities.yaml)
                  echo "{\"attributes\":{\"default_port\":${write_target_port}},\"type\":\"tcp\",\"name\":\"${write_target_name}\",\"description\":\"${write_target_description}\",\"session_max_seconds\":28800,\"session_connection_limit\":-1,\"worker_filter\":null,\"scope_id\":\"${project_id}\"}" > target.json
                  write_target_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @target.json ${{ inputs.BOUNDARY_URL }}/v1/targets | jq '.id' )
                  echo Write target $write_target_id

                  #add host-set in READ + WRITE target
                  echo "{\"version\":1,\"host_source_ids\":[${host_set_id}]}" > add_host_set_to_target.json
                  read_target_id_trim="${read_target_id%\"}"
                  read_target_id_trim="${read_target_id_trim#\"}"
                  write_target_id_trim="${write_target_id%\"}"
                  write_target_id_trim="${write_target_id_trim#\"}"
                  curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @add_host_set_to_target.json ${{ inputs.BOUNDARY_URL }}/v1/targets/$read_target_id_trim:add-host-sources
                  curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @add_host_set_to_target.json ${{ inputs.BOUNDARY_URL }}/v1/targets/$write_target_id_trim:add-host-sources
                  rm -f add_host_set_to_target.json

                  db_connection_name="$( echo $host_name )_db"
                  db_credential_read_role="$( echo $host_name )_read_role"
                  db_credential_write_role="$( echo $host_name )_write_role"
                  db_engine=$( yq ".items[$i].host.db_engine" ${{ inputs.REALM }}_create_entities.yaml)
                  host_username=$( yq ".items[$i].host.username" ${{ inputs.REALM }}_create_entities.yaml)
                  host_password=$( yq ".items[$i].host.password" ${{ inputs.REALM }}_create_entities.yaml)

                  if [ $db_engine == "mysql" ] ;then

                    echo "{\"backend\":\"database\",\"name\":\"${db_connection_name}\",\"plugin_name\":\"mysql-database-plugin\",\"verify_connection\":true,\"connection_url\":\"{{username}}:{{password}}@tcp(${host_ip}:3306)\/\",\"username\":\"${host_username}\",\"password\":\"${host_password}\",\"max_open_connections\":4,\"max_idle_connections\":0,\"max_connection_lifetime\":\"0s\"}" > db_connection_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @db_connection_payload.json ${{ inputs.VAULT_URL }}/v1/database/config/$db_connection_name

                    #creat READ vault role for database-user creation
                    echo "{\"backend\":\"database\",\"name\":\"${db_credential_read_role}\",\"type\":\"dynamic\",\"default_ttl\":\"1h\",\"max_ttl\":\"24h\",\"rotation_period\":\"24h\",\"creation_statements\":[\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\"],\"path\":\"roles\",\"db_name\":\"${db_connection_name}\"}" > db_role_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @db_role_payload.json ${{ inputs.VAULT_URL }}/v1/database/roles/$db_credential_create_role

                    #creat WRITE vault role for database-user creation
                    echo "{\"backend\":\"database\",\"name\":\"${db_credential_write_role}\",\"type\":\"dynamic\",\"default_ttl\":\"1h\",\"max_ttl\":\"24h\",\"rotation_period\":\"24h\",\"creation_statements\":[\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE ROLE, DROP ROLE ON *.* TO '{{name}}'@'%' WITH GRANT OPTION ;FLUSH PRIVILEGES;\"],\"path\":\"roles\",\"db_name\":\"${db_connection_name}\"}" > db_role_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @db_role_payload.json ${{ inputs.VAULT_URL }}/v1/database/roles/$db_credential_write_role

                    #add READ + WRITE role in DB connection
                    echo "{\"allowed_roles\":[\"${db_credential_read_role}\",\"${db_credential_write_role}\"]}" > allowed_role_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @allowed_role_payload.json ${{ inputs.VAULT_URL }}/v1/database/config/$db_connection_name

                  elif [ $db_engine == "postgresql" ] ;then

                    echo Postgres db connection
                    echo ${{ secrets.VAULT_TOKEN }} ${{ inputs.VAULT_URL }}
                    database_name=$( yq ".items[$i].host.database_name" ${{ inputs.REALM }}_create_entities.yaml)
                    echo "{\"backend\":\"database\",\"name\":\"${db_connection_name}\",\"plugin_name\":\"postgresql-database-plugin\",\"verify_connection\":true,\"connection_url\":\"postgresql://{{username}}:{{password}}@${host_ip}:5432/${database_name}\",\"username\":\"${host_username}\",\"password\":\"${host_password}\",\"max_open_connections\":4,\"max_idle_connections\":0,\"max_connection_lifetime\":\"0s\"}" > db_connection_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @db_connection_payload.json ${{ inputs.VAULT_URL }}/v1/database/config/$db_connection_name

                    #creat READ vault role for database-user creation
                    echo "{\"backend\":\"database\",\"name\":\"${db_credential_read_role}\",\"type\":\"dynamic\",\"default_ttl\":\"1h\",\"max_ttl\":\"24h\",\"rotation_period\":\"24h\",\"creation_statements\":[\"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \\\"{{name}}\\\";\"],\"path\":\"roles\",\"db_name\":\"${db_connection_name}\"}" > db_role_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @db_role_payload.json ${{ inputs.VAULT_URL }}/v1/database/roles/$db_credential_read_role

                    #creat WRITE vault role for database-user creation
                    echo "{\"backend\":\"database\",\"name\":\"${db_credential_write_role}\",\"type\":\"dynamic\",\"default_ttl\":\"1h\",\"max_ttl\":\"24h\",\"rotation_period\":\"24h\",\"creation_statements\":[\"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \\\"{{name}}\\\";\"],\"path\":\"roles\",\"db_name\":\"${db_connection_name}\"}" > db_role_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @db_role_payload.json ${{ inputs.VAULT_URL }}/v1/database/roles/$db_credential_write_role

                    #add READ + WRITER role in DB connection
                    echo "{\"allowed_roles\":[\"${db_credential_read_role}\",\"${db_credential_write_role}\"]}" > allowed_role_payload.json
                    curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @allowed_role_payload.json ${{ inputs.VAULT_URL }}/v1/database/config/$db_connection_name

                  fi

                  #policy for boundary to access db_connection_role
                  db_policy="$( echo $host_name )_db_policy"

                  #Create policy for boundary to access role
                  echo "{\"name\":\"${db_policy}\",\"policy\":\"path \\\"database/creds/${db_credential_read_role}\\\" {\n  capabilities = [\\\"read\\\"]\n}\n\npath \\\"database/creds/${db_credential_write_role}\\\" {\n  capabilities = [\\\"read\\\"]\n}\n\npath \\\"auth/token/lookup-self\\\" {\n  capabilities = [\\\"read\\\"]\n}\n\npath \\\"auth/token/renew-self\\\" {\n  capabilities = [\\\"update\\\"]\n}\n\npath \\\"auth/token/revoke-self\\\" {\n  capabilities = [\\\"update\\\"]\n}\n\npath \\\"sys/leases/renew\\\" {\n  capabilities = [\\\"update\\\"]\n}\n\npath \\\"sys/leases/revoke\\\" {\n  capabilities = [\\\"update\\\"]\n}\n\npath \\\"sys/capabilities-self\\\" {\n  capabilities = [\\\"update\\\"]\n}\"}" > vault_boundary_policy.json
                  curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @vault_boundary_policy.json ${{ inputs.VAULT_URL }}/v1/sys/policy/$db_policy

                  #Generate vault token
                  echo "{ \"policies\": [\"${db_policy}\"],\"no_default_policy\": true,\"no_parent\": true,\"period\": \"5h\",\"renewable\": true }" > vault_db_token_payload.json
                  boundary_token=$(curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @vault_db_token_payload.json ${{ inputs.VAULT_URL }}/v1/auth/token/create | jq '.auth.client_token' )
                  echo Token to put in boundary $boundary_token

                  #Create credential store in boundary
                  credential_store_name="$( echo $host_name )_cred_store"
                  echo "{\"type\":\"vault\",\"name\":\"${credential_store_name}\",\"description\":\"${host_description}\",\"attributes\":{\"address\":\"http://vault.default:8200/\",\"namespace\":null,\"ca_cert\":null,\"tls_server_name\":null,\"tls_skip_verify\":false,\"token\":${boundary_token},\"client_certificate\":null,\"client_certificate_key\":null},\"scope_id\":\"${project_id}\"}" > credential_store_payload.json
                  credential_store_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @credential_store_payload.json ${{ inputs.BOUNDARY_URL }}/v1/credential-stores | jq '.id' )
                  echo Credential_store_id created is $credential_store_id

                  #create READ credential library
                  read_cred_lib="$( echo $host_name )_read_cred_lib"
                  echo "{\"type\":\"vault\",\"credential_store_id\":${credential_store_id},\"name\":\"${read_cred_lib}\",\"description\":\"${host_description}\",\"attributes\":{\"http_method\":\"GET\",\"path\":\"database/creds/${db_credential_read_role}\"}}" > cred_lib_info.json
                  read_cred_lib_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @cred_lib_info.json ${{ inputs.BOUNDARY_URL }}/v1/credential-libraries | jq '.id' )

                  #create WRITE credential library
                  write_cred_lib="$( echo $host_name )_write_cred_lib"
                  echo "{\"type\":\"vault\",\"credential_store_id\":${credential_store_id},\"name\":\"${write_cred_lib}\",\"description\":\"${host_description}\",\"attributes\":{\"http_method\":\"GET\",\"path\":\"database/creds/${db_credential_write_role}\"}}" > cred_lib_info.json
                  write_cred_lib_id=$(curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @cred_lib_info.json ${{ inputs.BOUNDARY_URL }}/v1/credential-libraries | jq '.id' )

                  #add READ credential library to READ target
                  echo "{\"version\":2,\"application_credential_source_ids\":[${read_cred_lib_id}]}" > add_cred_lib_to_target.json
                  curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @add_cred_lib_to_target.json ${{ inputs.BOUNDARY_URL }}/v1/targets/$read_target_id_trim:add-credential-sources

                  #add WRITE credential library to WRITE target
                  echo "{\"version\":2,\"application_credential_source_ids\":[${write_cred_lib_id}]}" > add_cred_lib_to_target.json
                  curl --header "Authorization: Bearer ${{ secrets.token }}" --request POST --data @add_cred_lib_to_target.json ${{ inputs.BOUNDARY_URL }}/v1/targets/$write_target_id_trim:add-credential-sources

                  echo Successfully created host - $host_id , host-set - $host_set_id , targets - $read_target_id , $write_target_id , cred_store - $credential_store_id , cred_lib - $read_cred_lib_id , $write_cred_lib_id
            done
      - name: Delete cache file
        run: |
          echo ${{ secrets.GIT_TOKEN }}
          curl --location --request DELETE --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{ secrets.GIT_TOKEN }}" "https://api.github.com/repos/Pratiyush05Pushkar/hello-world-2/actions/caches?key=${{ github.sha }}_${{ inputs.REALM }}_create_entities"




