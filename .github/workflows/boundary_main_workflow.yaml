name: Boundary update
run-name: Main Boundary workflow

on: push

jobs:
  build_script:
    runs-on: self-hosted
    name: Main worlflow
    outputs:
        ENGINEERING_BOUNDARY_TOKEN: ${{ steps.set_outputs.outputs.ENGINEERING_BOUNDARY_TOKEN }}
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Read files changed in recent git push
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            Vault-secrets/boundary/prod/apps/**
            Vault-secrets/boundary/stage/apps/**
      - name: Set Boundary login tokens
        id: set_outputs
        run: |
            readonly ENG_AUTH_ID="ampw_sC1BbzThIj"
            readonly BUS_AUTH_ID="XXX"
            readonly BOUNDARY_URL="http://boundary-release.default:9200";

            echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"admin\",\"password\":\"password\"}}" > payload.json
            curl --request POST --data @payload.json $BOUNDARY_URL/v1/auth-methods/${ENG_AUTH_ID}:authenticate > response.json
            token=$(jq -r '.attributes.token' response.json)
            echo $token
            echo "ENGINEERING_BOUNDARY_TOKEN=$( echo $token )" >> "$GITHUB_OUTPUT"

            # echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"admin\",\"password\":\"${{ secrets.BOUNDARY_LOGIN_PASSWORD_BUSINESS }}\"}}" > payload.json
            # curl --request POST --data @payload.json $BOUNDARY_URL/v1/auth-methods/${BUS_AUTH_ID}:authenticate > response.json
            # token=$(jq -r '.attributes.token' response.json)
            # echo $token
            # echo "BUSINESS_BOUNDARY_TOKEN=$( echo $token )" >> "$GITHUB_OUTPUT"

      - name: Create data file
        id: main_workflow
        run: |
            #globally used constants
            readonly BOUNDARY_URL="http://boundary-release.default:9200";
            readonly VAULT_URL="http://vault.default:8200";

            #updateTargetsInAllScopes(prod_project_id, stage_project_id, scope_name)
            updateTargetsInAllScopes(){
              token=""
              if [ $3 == "ENGINEERING" ] ;
              then
                token=${{ steps.set_outputs.outputs.ENGINEERING_BOUNDARY_TOKEN }}
              else
                token=${{ steps.set_outputs.outputs.BUSINESS_BOUNDARY_TOKEN }}
              fi

              #get Entity Id in Boundary
              entityId=""
              getEntityId(){
                entity_id_to_del=$(jq -r --arg entity_name $2 '.items[] | select(.name==$entity_name) | .id' $1)
                entity_id_to_del_trim="${entity_id_to_del%\"}"
                entity_id_to_del_trim="${entity_id_to_del_trim#\"}"
                entityId=$entity_id_to_del_trim
              }


              echo "items:" > $3_delete_entities.yaml
              echo "items:" > $3_create_entities.yaml
              echo "items:" > $3_patch_entities.yaml

              for val in ${{ steps.changed-files-specific.outputs.all_changed_files }}
              do
                  echo $val
                  #get project id
                  project_name=$(yq ".project" $val)
                  project_id=""
                  if [ $project_name == "stage" ] ;
                  then
                    project_id=$2
                  else
                    project_id=$1
                  fi
                  #read host-catalog from yaml file
                  host_catalog_name=$(yq ".host-catalog.name" $val)
                  host_catalog_description=$(yq ".host-catalog.description" $val)

                  #get host-catalog list
                  curl --header "Authorization: Bearer ${token}" --request GET $BOUNDARY_URL/v1/host-catalogs?scope_id=$project_id > all_host_catalogs.json
                  host_catalog_id=""
                  host_catalog_name_list=$(jq ".items[].name" all_host_catalogs.json)

                  #if host-catalog doesnot exists , we need to create it
                  if [[ $( echo $host_catalog_name_list | grep $host_catalog_name ) ]]; then
                    host_catalog_id=$(jq -r --arg hc_name $host_catalog_name '.items[]? | select(.name==$hc_name) | .id' all_host_catalogs.json)
                  else
                    echo Near to create Host_catalog_id $host_catalog_id
                    echo "{\"type\":\"static\",\"name\":\"${host_catalog_name}\",\"description\":\"${host_catalog_description}\",\"scope_id\":\"${project_id}\"}" > host_catalog.json
                    host_catalog_id=$(curl --header "Authorization: Bearer ${token}" --request POST --data @host_catalog.json $BOUNDARY_URL/v1/host-catalogs | jq '.id' )
                    host_catalog_id_trim="${host_catalog_id%\"}"
                    host_catalog_id="${host_catalog_id_trim#\"}"
                    rm -f host_catalog.json
                  fi

                  echo $host_catalog_id
                  #get host-sets , hosts , targets and credential stores which are already present
                  curl --header "Authorization: Bearer ${token}" --request GET $BOUNDARY_URL/v1/host-sets?host_catalog_id=$host_catalog_id > all_host_sets.json
                  curl --header "Authorization: Bearer ${token}" --request GET $BOUNDARY_URL/v1/hosts?host_catalog_id=$host_catalog_id > all_hosts.json
                  curl --header "Authorization: Bearer ${token}" --request GET $BOUNDARY_URL/v1/targets?scope_id=$project_id > all_targets.json
                  curl --header "Authorization: Bearer ${token}" --request GET $BOUNDARY_URL/v1/credential-stores?scope_id=$project_id > all_credential_stores.json

                  #host-sets already present in Boundary
                  old_host_set_list=$(jq -r '. | select(.items) | .items[].name' all_host_sets.json)
                  echo Old_host_Set_list $old_host_set_list

                  #host-sets in recent yaml file
                  new_host_set_list=$(yq '.host-catalog.hosts[].name | . + "_set"' $val)
                  echo NEW_host_Set_list $new_host_set_list

                  #diff gets us deleted host-sets and newly created host-sets
                  diff_host_set=$(echo ${old_host_set_list[@]} ${new_host_set_list[@]} | tr ' ' '\n' | sort | uniq -u )

                  echo ${!diff_host_set[@]}
                  echo $diff_host_set

                  for diff_hs in $diff_host_set
                  do
                      if [[ $( echo $old_host_set_list | grep $diff_hs ) ]]; then
                          echo Deleting entities

                          #get host_id
                          host_name="${diff_hs%_set}"
                          getEntityId all_hosts.json $host_name
                          host_id=$entityId

                          #get host_set_id
                          host_set_name="$( echo $host_name )_set"
                          getEntityId all_host_sets.json $host_set_name
                          host_set_id=$entityId

                          #get target_id
                          read_target_name="$( echo $host_name )_read_target"
                          getEntityId all_targets.json $read_target_name
                          read_target_id=$entityId

                          write_target_name="$( echo $host_name )_write_target"
                          getEntityId all_targets.json $write_target_name
                          write_target_id=$entityId

                          #get credential_store_id
                          cred_store_name="$( echo $host_name )_cred_store"
                          getEntityId all_credential_stores.json $cred_store_name
                          cred_store_id=$entityId

                          #Vault Db Read Role
                          v_d_r_r=$( echo $host_name )_read_role

                          #Vault Db Write Role
                          v_d_w_r=$( echo $host_name )_write_role

                          #Vault Db Connection
                          v_d_c=$( echo $host_name )_db

                          #Vault Db Policy
                          v_d_p=$( echo $host_name )_db_policy

                          hID=$host_id hsID=$host_set_id rTID=$read_target_id wTID=$write_target_id cID=$cred_store_id vDRR=$v_d_r_r vDWR=$v_d_w_r vDC=$v_d_c vDP=$v_d_p yq -i '.items += [{"host_id":strenv(hID),"host_set_id":strenv(hsID),"read_target_id":strenv(rTID),"write_target_id":strenv(wTID),"cred_store_id":strenv(cID),"vault_db_read_role":strenv(vDRR),"vault_db_write_role":strenv(vDWR),"vault_db_connection":strenv(vDC),"vault_db_policy":strenv(vDP)}]' $3_delete_entities.yaml

                          echo Updated delete yaml $3_delete_entities.yaml
                      else
                          echo Creating entity
                          #extract host config from yaml file
                          h="${diff_hs%_set}" yq '.host-catalog.hosts[] | select(.name==env(h))' $val > data.yaml

                          pID=$project_id hcID=$host_catalog_id hcN=$host_catalog_name yq -i '.items += [{"project_id":strenv(pID),"host_catalog_name":strenv(hcN),"host_catalog_id":strenv(hcID),"host":load("data.yaml")}]' $3_create_entities.yaml

                          echo Updating create yaml $3_create_entities.yaml
                      fi

                  done

                  if [ ${!diff_host_set[@]} == 0 ] ;
                  then
                      new_host_list=($(yq '.host-catalog.hosts[].name' $val ))

                      for h_name in "${new_host_list[@]}"; do

                          #get credential_store_id
                          cred_store_name="$( echo $h_name )_cred_store"
                          getEntityId all_credential_stores.json $cred_store_name
                          cred_store_id=$entityId

                          h=$h_name pID=$project_id csID=$cred_store_id yq -i '.items += [{"host_name":strenv(h),"project_id":strenv(pID),"cred_store_id":strenv(csID)}]' $3_patch_entities.yaml
                      done
                  fi
              done

              #Final yaml files
              cat $3_delete_entities.yaml
              cat $3_create_entities.yaml
              cat $3_patch_entities.yaml
            }

            #updateTargetsInAllScopes PROD_proj_id STAGE_proj_id REALM
            updateTargetsInAllScopes "p_HBZMfr6PcE" "p_Jv4BjggzW9" "ENGINEERING"


  call-delete-workflow:
    needs: build_script
    uses: ./.github/workflows/delete_entities_boundary.yaml
    with:
      BOUNDARY_URL: "http://boundary-release.default:9200"
      VAULT_URL: "http://vault.default:8200"
      REALM: "ENGINEERING"
    secrets:
      token: ${{ needs.build_script.outputs.ENGINEERING_BOUNDARY_TOKEN }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  call-create-workflow:
    needs: [ build_script , call-delete-workflow ]
    uses: ./.github/workflows/create_entities_boundary.yaml
    with:
      BOUNDARY_URL: "http://boundary-release.default:9200"
      VAULT_URL: "http://vault.default:8200"
      REALM: "ENGINEERING"
    secrets:
      token: ${{ needs.build_script.outputs.ENGINEERING_BOUNDARY_TOKEN }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  call-patch-workflow:
    needs: build_script
    uses: ./.github/workflows/patch_entities_boundary.yaml
    with:
      BOUNDARY_URL: "http://boundary-release.default:9200"
      VAULT_URL: "http://vault.default:8200"
      REALM: "ENGINEERING"
    secrets:
      token: ${{ needs.build_script.outputs.ENGINEERING_BOUNDARY_TOKEN }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}



