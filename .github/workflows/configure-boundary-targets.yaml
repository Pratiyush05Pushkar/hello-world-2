name: Put targets in boundary 
run-name: Add targets in boundary

on: push

jobs:  
  build:
    runs-on: self-hosted
    name: Put targets in boundary
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Get changed files in the docs folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            Vault-secrets/boundary/**
      # - name: Run step if any file(s) in the Vault-secret folder change
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: |
      #     for file in ${{ steps.changed-files-specific.outputs.all_changed_files }} ; do 
      #       yq -o=json $file
      #     done
      # Prints the changes when done / added - Git Actions does not run when file is removed ******
      - name: To upload targets 
        run: |
            echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"admin\",\"password\":\"password\"}}" > payload.json
            curl --request POST --data @payload.json http://boundary-release.default:9200/v1/auth-methods/ampw_sC1BbzThIj:authenticate > response.json
            token=$(jq -r '.attributes.token' response.json)
            echo $token
            for val in ${{ steps.changed-files-specific.outputs.all_changed_files }} ;
            do 
                #get project id
                project_name=$(yq ".project" $val)
                project_id=""
                if [ $project_name == "stage" ]
                then
                  project_id="p_Jv4BjggzW9"
                else
                  project_id="p_HBZMfr6PcE"
                fi

                #read host-catalog from yaml file 
                host_catalog_name=$(yq ".host-catalog.name" $val)
                host_catalog_description=$(yq ".host-catalog.description" $val)
                
                
                #get host-catalog list
                curl --header "Authorization: Bearer ${token}" --request GET http://boundary-release.default:9200/v1/host-catalogs?scope_id=$project_id > all_host_catalogs.json
                host_catalog_id=$(jq -r --arg hc_name $host_catalog_name '.items[] | select(.name==$hc_name) | .id' all_host_catalogs.json)
                
                if [ -z "$host_catalog_id" ]; then
                  echo "{\"type\":\"static\",\"name\":\"${host_catalog_name}\",\"description\":\"${host_catalog_description}\",\"scope_id\":\"${project_id}\"}" > host_catalog.json
                  host_catalog_id=$(curl --header "Authorization: Bearer ${token}" --request POST --data @host_catalog.json http://boundary-release.default:9200/v1/host-catalogs | jq '.id' )
                  rm -f host_catalog.json
                fi
                
                #get host-sets which are already present 
                curl --header "Authorization: Bearer ${token}" --request GET http://boundary-release.default:9200/v1/host-sets?host_catalog_id=$host_catalog_id > all_host_set.json
                old_host_set_list=$(jq -r '. | select(.items) | .items[].name' all_host_set.json)

                #host-sets in yaml file 
                new_host_set_list=$(yq ".host-catalog.host-sets[].name" $val)

                #diff gets us deleted host-sets and newly created host-sets 
                diff_host_set=$(echo ${old_host_set_list[@]} ${new_host_set_list[@]} | tr ' ' '\n' | sort | uniq -u )
                
                echo OLD_list $old_host_set_list 
                echo New list $new_host_set_list 
                echo diff $diff_host_set
                for diff_hs in $diff_host_set;
                do
                    if [ ! $(echo $old_host_set_list | grep -q diff_hs ; echo $? ) ] ;then
                          #deleted host-sets in recent git push
                          echo Needs to be deleted 
                    else
                          echo diff_val $diff_hs
                          #newly created host-sets in recent git push
                          hs=$diff_hs yq '.host-catalog.host-sets[] | select(.name==env(hs))' $val > data.yaml
                          
                          #create host-set
                          host_set_name=$(yq ".name" data.yaml)
                          host_set_description=$(yq ".description" data.yaml)
                          echo "{\"host_catalog_id\":\"${host_catalog_id}\",\"name\":\"${host_set_name}\",\"description\":\"${host_set_description}\"}" > new_host_set.json
                          host_set_id=$(curl --header "Authorization: Bearer ${token}" --request POST --data @new_host_set.json http://boundary-release.default:9200/v1/host-sets | jq '.id' )
                          
                          #create host
                          host_name=$(yq ".hosts.name" data.yaml)
                          host_description=$(yq ".hosts.description" data.yaml)
                          host_ip=$(yq ".hosts.address" data.yaml)
                          host_username=$(yq ".hosts.username" data.yaml)
                          host_password=$(yq ".hosts.password" data.yaml)
                          echo "{\"attributes\":{\"address\":\"${host_ip}\"},\"type\":\"static\",\"host_catalog_id\":\"${host_catalog_id}\",\"name\":\"${host_name}\",\"description\":\"${host_description}\"}" > host.json
                          host_id=$(curl --header "Authorization: Bearer ${token}" --request POST --data @host.json http://boundary-release.default:9200/v1/hosts | jq '.id' )
                          
                          
                          #add host to host-set
                          echo "{\"version\":1,\"host_ids\":[${host_id}]}" > add_host_to_host_set.json
                          host_set_id_trim="${host_set_id%\"}"
                          host_set_id_trim="${host_set_id_trim#\"}"
                          curl --header "Authorization: Bearer ${token}" --request POST --data @add_host_to_host_set.json http://boundary-release.default:9200/v1/host-sets/$host_set_id_trim:add-hosts
                          

                          #create target 
                          target_name=$(yq ".target.name" data.yaml)
                          target_description=$(yq ".target.description" data.yaml)
                          target_default_port=$(yq ".target.default_port" data.yaml)
                          echo "{\"attributes\":{\"default_port\":${target_default_port}},\"type\":\"tcp\",\"name\":\"${target_name}\",\"description\":\"${target_description}\",\"session_max_seconds\":28800,\"session_connection_limit\":-1,\"worker_filter\":null,\"scope_id\":\"${project_id}\"}" > target.json
                          cat target.json
                          target_id=$(curl --header "Authorization: Bearer ${token}" --request POST --data @target.json http://boundary-release.default:9200/v1/targets | jq '.id' )
                          
                          #add host-set in target
                          echo "{\"version\":1,\"host_source_ids\":[${host_set_id}]}" > add_host_set_to_target.json
                          target_id_trim="${target_id%\"}"
                          target_id_trim="${target_id_trim#\"}"
                          curl --header "Authorization: Bearer ${token}" --request POST --data @add_host_set_to_target.json http://boundary-release.default:9200/v1/targets/$target_id_trim:add-host-sources
                          rm -f add_host_set_to_target.json
                          
                    fi 
                done 


            done
            
        
          

