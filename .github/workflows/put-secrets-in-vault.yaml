name: Put targets in boundary 
run-name: Adding targets in boundary

on: push

jobs:  
  build:
    runs-on: self-hosted
    name: Put targets in boundary
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Read files changed in recent git push
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            Vault-secrets/boundary/prod/apps/**
            Vault-secrets/boundary/stage/apps/**
             
      - name: To upload targets to Liv Engg & Liv Business
        run: |
            readonly BOUNDARY_URL="http://127.0.0.1:9200";
            readonly VAULT_URL="http://127.0.0.1:8200";
            
            #updateTargetsInAllScopes(prod_project_id, stage_project_id, auth-id, boundary_login_username, boundary_login_password, boolean_give_stage_write_access, scope_name)
            updateTargetsInAllScopes(){
              #globally used constants
              PROD_PROJECT_ID=$1;
              STAGE_PROJECT_ID=$2;
              AUTH_ID=$3;
              #genericMethods
              #deleteEntityById(filename, entityName, entityDeleteEndpoint, token)
              deleteEntityById(){
                entity_id_to_del=$(jq -r --arg entity_name $2 '.items[] | select(.name==$entity_name) | .id' $1)
                entity_id_to_del_trim="${entity_id_to_del%\"}"
                entity_id_to_del_trim="${entity_id_to_del_trim#\"}"
                curl --header "Authorization: Bearer ${4}" --request DELETE $BOUNDARY_URL/$3$entity_id_to_del_trim
              }
              
              #deleteFromVaultRequest(completeEndpoint)
              deleteFromVaultRequest(){
                curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request DELETE $1
              }
              
              #postVaultRequest(bodyFile, complateEndpoint)
              postRequestVault(){
                curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @$1 $2
              }
              
              echo Login password is "$5"
              #add login username as
              if [ $5 == "livspace_engineering" ] ;
              then
                  echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"$4\",\"password\":\"${{ secrets.BOUNDARY_LOGIN_PASSWORD }}\"}}" > payload.json
              elif [ $5 == "livspace_business" ] ;
              then
                  echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"$4\",\"password\":\"${{ secrets.BOUNDARY_LOGIN_PASSWORD_BUSINESS }}\"}}" > payload.json
              fi
              
              curl --request POST --data @payload.json $BOUNDARY_URL/v1/auth-methods/${AUTH_ID}:authenticate > response.json
              token=$(jq -r '.attributes.token' response.json)
              echo $token
            }
            #give all access for staging targets in engg
            updateTargetsInAllScopes "p_HBZMfr6PcE" "p_Jv4BjggzW9" "ampw_sC1BbzThIj" "admin" "livspace_engineering" "engineering"
            #give only read access for staging in busines
            updateTargetsInAllScopes "p_VaRU5Yjk0V" "p_IrBIr44K2a" "ampw_sdovhsD199" "admin" "livspace_business" "business"

              
          
            