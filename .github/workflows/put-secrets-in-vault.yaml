name: Put targets in boundary 
run-name: Adding targets in boundary

on: push

jobs:  
  build:
    runs-on: self-hosted
    name: Put targets in boundary
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: dcarbone/install-jq-action@v1.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Read files changed in recent git push
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            Vault-secrets/boundary/prod/apps/**
            Vault-secrets/boundary/stage/apps/**
      
      - name: Print Variables
        run: |
            git remote -v
            git branch -av
            git status
      - name: To upload targets to Liv Engg & Liv Business
        run: |
            # #updateTargetsInAllScopes(prod_project_id, stage_project_id, auth-id, boundary_login_username, boundary_login_password, boolean_give_stage_write_access, scope_name)
            # updateTargetsInAllScopes(){
            #   #globally used constants
            #   PROD_PROJECT_ID=$1;
            #   STAGE_PROJECT_ID=$2;
            #   AUTH_ID=$3;
            #   BOUNDARY_URL="https://boundary.eng.livspace.com";
            #   VAULT_URL="http://127.0.0.1:8200";
            #   #genericMethods

            #   #deleteEntityById(filename, entityName, entityDeleteEndpoint, token)
            #   deleteEntityById(){
            #     entity_id_to_del=$(jq -r --arg entity_name $2 '.items[] | select(.name==$entity_name) | .id' $1)
            #     entity_id_to_del_trim="${entity_id_to_del%\"}"
            #     entity_id_to_del_trim="${entity_id_to_del_trim#\"}"
            #     curl --header "Authorization: Bearer ${4}" --request DELETE $BOUNDARY_URL/$3$entity_id_to_del_trim
            #   }
              
            #   #deleteFromVaultRequest(completeEndpoint)
            #   deleteFromVaultRequest(){
            #     curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request DELETE $1
            #   }
              
            #   #postVaultRequest(bodyFile, complateEndpoint)
            #   postRequestVault(){
            #     curl --header "X-Vault-Token:${{ secrets.VAULT_TOKEN }}" --request POST --data @$1 $2
            #   }
              
              
            #   #add login username as
            #   #echo "" > payload.json

            #   echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"$4\",\"password\":\"$5\"}}" > payload.json
            #   # if [[ "$5" == "livspae_engineering" ]];
            #   # then
            #   #     echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"$4\",\"password\":\"$5\"}}" > payload.json
            #   # elif [[ "$5" == "livspace_business" ]];
            #   # then
            #   #     echo "{\"command\":\"login\",\"token_type\":null,\"attributes\":{\"login_name\":\"$4\",\"password\":\"$5\"}}" > payload.json
            #   # fi
              
            #   cat payload.json
            #   curl --request POST --data @payload.json $BOUNDARY_URL/v1/auth-methods/${AUTH_ID}:authenticate > response.json
            #   token=$(jq -r '.attributes.token' response.json)
            #   echo $token
            # }
            # #give all access for staging targets in engg
            # updateTargetsInAllScopes "p_irEkOY52Cc" "p_65kyJxGg5q" "ampw_id4LwBX82D" "admin" "${{ secrets.BOUNDARY_LOGIN_PASSWORD }}"
            
            # updateTargetsInAllScopes "p_VJ0xh4QA0G" "p_Hkv2ShpUxm" "ampw_MXbvWmTZUE" "admin-business" "${{ secrets.BOUNDARY_LOGIN_PASSWORD_BUSINESS }}"

            # #rm -f payload.json
              
          
            