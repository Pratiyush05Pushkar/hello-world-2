name: GitHub Actions Demo
run-name: ${{ github.actor }} is automating policy and role creation
on: push
jobs:  
  build:
    runs-on: self-hosted
    name: Auto-policy-role-update
    steps:
      - uses: dcarbone/install-yq-action@v1.0.0
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Get changed files in the docs folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            Vault-secrets/bouncer/**
      # - name: Run step if any file(s) in the Vault-secret folder change
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: |
      #     for file in ${{ steps.changed-files-specific.outputs.all_changed_files }} ; do 
      #       yq -o=json $file
      #     done
      # Prints the changes when done / added - Git Actions does not run when file is removed ******
      - name: Run this to read files changed in spc-yaml
        run: |
            #globally used constants
            readonly VAULT_ADDR="http://0.0.0.0:8200"

            for val in ${{ steps.changed-files-specific.outputs.all_changed_files }} ;
            do 
                yq ".spec.parameters.objects" $val > object.yaml
                cat object.yaml
                
                all_secret_paths=$(yq ".[].secretPath" object.yaml)
                final_policy=""
                unique_secret_paths=$(echo "$all_secret_paths" |sort|uniq)
                echo $all_secret_paths ;
                echo $unique_secret_paths ;
                
                for val in $unique_secret_paths ;
                do
                    final_policy+="\n path \\\"${val}\\\" { \n \t capabilities = [\\\"read\\\"] \n } \n"
                    echo $val
                done
                final_policy=\"$final_policy\"
                echo $final_policy
                echo "{ \"policy\": ${final_policy} }" > payload.json
                cat payload.json
                policy_name="$(yq ".metadata.name" $val )_policy"
                curl --header "X-Vault-Token:root" --request POST --data @payload.json $VAULT_ADDR/v1/sys/policy/$policy_name

                role_name="$(yq ".spec.parameters.roleName" $val )"
                kubernetes_auth_method="$(yq ".spec.parameters.vaultKubernetesMountPath" $val )"
                serviceaccountname="$(yq ".spec.parameters.vaultKubernetesMountPath" $val )"
                serviceaccount_namespace="$(yq ".spec.parameters.vaultKubernetesMountPath" $val )"

                echo "{ \"bound_service_account_names\":[\"${serviceaccountname}\"],\"bound_service_account_namespaces\":[\"${serviceaccount_namespace}\"],\"token_policies\":[\"${policy_name}\"]}" > payload.json
                curl --header "X-Vault-Token:root" --request POST --data @payload.json $VAULT_ADDR/v1/auth/$kubernetes_auth_method/role/$role_name    
            done
        
          

