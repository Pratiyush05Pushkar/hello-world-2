name: GitHub Actions Demo
run-name: ${{ github.actor }} is automating policy and role creation
on: [push]
jobs:  
  build:
    runs-on: self-hosted
    name: Auto-policy-role-update
    steps:
      - name: Get changed files in the docs folder
        id: changed-files-specific
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
        uses: tj-actions/changed-files@v34
        with:
          files: |
            Vault-secrets/bouncer/**
      - name: Run step if any file(s) in the Vault-secret folder change
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files-specific.outputs.all_changed_files }} ; do 
            yq -o=json $file
          done
      # Prints the changes when done / added - Git Actions does not run when file is removed ******
      - name: Run this to read files changed in spc-yaml
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          yq ".spec.parameters.objects" ${{ steps.changed-files-specific.outputs.all_changed_files }} > object.yaml
          cat object.yaml
          all_secret_paths=$(yq ".[].secretPath" object.yaml )
          final_policy=""
          unique_secret_paths=$(echo "$all_secret_paths" |sort|uniq)
          echo $all_secret_paths ;
          echo $unique_secret_paths ;
          for val in $unique_secret_paths ;
          do
              final_policy+="\n path \\\"${val}\\\" { \n \t capabilities = [\\\"read\\\"] \n } \n"
              echo $val
          done
          final_policy=\"$final_policy\"
          echo $final_policy
          cat > payload.json << EOF
          {
            "policy": ${final_policy}
          }
          EOF
          cat payload.json
          policy_name="$(yq ".metadata.name" ${{ steps.changed-files-specific.outputs.all_changed_files }} )_policy"
          role_name="$(yq ".metadata.name" ${{ steps.changed-files-specific.outputs.all_changed_files }} )_role"
          service_account_name=$(yq ".metadata.labels.serviceAccountName" ${{ steps.changed-files-specific.outputs.all_changed_files }} )
          curl --header "X-Vault-Token:root" --request POST --data @payload.json http://127.0.0.1:8200/v1/sys/policy/$policy_name          
          cat > payload.json << EOF
          {
            "name": "${role_name}",
            "bound_service_account_names": "${service_account_name}",
            "bound_service_account_namespaces": "default",
            "token_policies": "${policy_name}"
          }
          EOF
          cat payload.json
          curl --header "X-Vault-Token:root" --request POST --data @payload.json http://127.0.0.1:8200/v1/auth/kubernetes/role/$role_name    
          rm -f object.yaml payload.json

